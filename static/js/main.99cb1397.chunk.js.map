{"version":3,"sources":["api/index.js","utils/index.js","redux/actions.js","redux/redusers.js","redux/selectors.js","components/Header/Header.jsx","components/Header/index.js","components/form-registration/vadalition.js","components/form-registration/Form-registration.jsx","components/form-registration/index.js","components/form-autorisation/vadalition.js","components/form-autorisation/Form-autorisation.jsx","components/form-autorisation/index.js","components/Home/Home.jsx","components/Home/index.js","components/App/App.jsx","components/App/index.js","index.jsx"],"names":["baseUrl","loginRequest","values","regData","user","username","email","password","url","axios","post","signupRequest","autData","userRequest","token","header","headers","Authorization","get","clearLocalstoge","localStorage","clear","setSignUpRequest","createAction","setSignUpSuccess","setSignUpFailure","setLoginRequest","setLoginSuccess","setLoginFailure","setUserRequest","setUserSuccess","setUserFailure","loginData","setLoginExit","handleActions","actions","state","payload","isLogin","isRequest","combineReducers","getLogin","getUsername","getIsRequest","actionCreators","Header","connect","handleClickExit","className","path","component","onClick","to","validationSchema","Yup","shape","max","min","required","matches","useStyles","makeStyles","theme","wrapper__registration","display","justifyContent","flexDirection","alignItems","padding","spacing","title","textTransform","textAlign","margin","marginTop","fontSize","registration","alignContent","width","registration__data","marginBottom","error__internet","color","setFieldError","dispatch","a","response","status","data","setItem","undefined","isAxiosError","FormRegistration","classes","initialValues","onSubmit","touched","errors","handleSubmit","handleBlur","handleChange","dirty","isValid","size","name","as","TextField","label","variant","onChange","error","Boolean","helperText","onBlur","value","disabled","type","autoComplete","fullWidth","htmlType","errorName","authorization","FormAutorization","Houme","getUser","history","getItem","push","App","useHistory","useEffect","Home","store","createStore","redusers","compose","applyMiddleware","thunk","Main","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.99cb1397.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const baseUrl = 'https://conduit.productionready.io/api/';\n\nexport const loginRequest = (values) => {\n  const { username, email, password } = values;\n  const regData = {\n    user: {\n      username,\n      email,\n      password,\n    },\n  };\n\n  const url = `${baseUrl}users`;\n  const response = axios.post(url, regData);\n  return response;\n};\n\nexport const signupRequest = (values) => {\n  const { email, password } = values;\n  const autData = {\n    user: {\n      email,\n      password,\n    },\n  };\n  const url = `${baseUrl}users/login`;\n  const response = axios.post(url, autData);\n  return response;\n};\n\nexport const userRequest = (token) => {\n  const header = {\n    headers: {\n      Authorization: `Token ${token}`,\n    },\n  };\n  const url = `${baseUrl}user`;\n  const response = axios.get(url, header);\n  return response;\n};\n","export const getToken = () => {\n  const token = localStorage.getItem('token');\n  return token;\n};\n\nexport const clearLocalstoge = () => {\n  localStorage.clear();\n};\n","import { createAction } from 'redux-actions';\nimport { loginRequest, signupRequest, userRequest } from '../api/index';\nimport { getToken } from '../utils';\n\nexport const setSignUpRequest = createAction('STATUS_SIGNUP_REQUEST');\nexport const setSignUpSuccess = createAction('STATUS_SIGNUP_SUCCESS');\nexport const setSignUpFailure = createAction('STATUS_SIGNUP_FAILURE');\n\nexport const setLoginRequest = createAction('STATUS_LOGIN_REQUEST');\nexport const setLoginSuccess = createAction('STATUS_LOGIN_SUCCESS');\nexport const setLoginFailure = createAction('STATUS_LOGIN_FAILURE');\n\nexport const setUserRequest = createAction('STATUS_USER_REQUEST');\nexport const setUserSuccess = createAction('STATUS_USER_SUCCESS');\nexport const setUserFailure = createAction('STATUS_USER_FAILURE');\n\nexport const loginData = createAction('LOGIN_DATA');\nexport const setLoginExit = createAction('LOGIN_EXIT');\nexport const getRequest = createAction('REQUEST_DATA');\n\nexport const getUser = (history) => async (dispatch) => {\n  dispatch(setUserRequest());\n  try {\n    const response = await userRequest(getToken());\n    dispatch(setUserSuccess());\n    dispatch(loginData(response.data));\n    history.push('/blogging-platform/home');\n  } catch (error) {\n    dispatch(setUserFailure());\n    history.push('/blogging-platform/signup');\n  }\n};\n\nexport const authorization = (values, setFieldError) => async (dispatch) => {\n  dispatch(setSignUpRequest());\n  try {\n    const response = await signupRequest(values);\n    dispatch(setSignUpSuccess());\n    const { token } = response.data.user;\n    localStorage.setItem('token', `${token}`);\n  } catch (error) {\n    dispatch(setSignUpFailure());\n    if (error.response === undefined && error.isAxiosError) {\n      setFieldError('errorName', 'Нет подключения к интернету');\n    } else {\n      setFieldError('password', 'Почта или пароль неверны');\n      setFieldError('email', 'Почта или пароль неверны');\n    }\n  }\n};\n\nexport const registration = (values, setFieldError) => async (dispatch) => {\n  dispatch(setLoginRequest());\n  try {\n    const response = await loginRequest(values);\n    if (response.status === 200) {\n      dispatch(setLoginSuccess());\n      const { token } = response.data.user;\n      localStorage.setItem('token', `${token}`);\n    }\n  } catch (error) {\n    dispatch(setLoginFailure());\n    if (error.response === undefined && error.isAxiosError) {\n      setFieldError('errorName', 'Нет подключения к интернету');\n    } else {\n      setFieldError(\n        'username',\n        'Пользователь с таким именем уже зарегистрирован',\n      );\n      setFieldError('email', 'Пользователь с такой почтой уже зарегистрирован');\n    }\n  }\n};\n","import { combineReducers } from 'redux';\nimport { handleActions } from 'redux-actions';\nimport * as actions from './actions';\n\nconst username = handleActions(\n  {\n    [actions.loginData](state, { payload: login }) {\n      return login.user.username;\n    },\n  },\n  '',\n);\n\nconst isLogin = handleActions(\n  {\n    [actions.setLoginSuccess]() {\n      return true;\n    },\n    [actions.setSignUpSuccess]() {\n      return true;\n    },\n    [actions.setUserSuccess]() {\n      return true;\n    },\n    [actions.setLoginFailure]() {\n      return false;\n    },\n    [actions.setSignUpFailure]() {\n      return false;\n    },\n    [actions.setUserFailure]() {\n      return false;\n    },\n    [actions.setLoginExit]() {\n      return false;\n    },\n  },\n  false,\n);\n\nconst isRequest = handleActions(\n  {\n    [actions.setLoginRequest]() {\n      return true;\n    },\n    [actions.setSignUpRequest]() {\n      return true;\n    },\n    [actions.setUserSuccess]() {\n      return false;\n    },\n    [actions.setLoginFailure]() {\n      return false;\n    },\n    [actions.setSignUpFailure]() {\n      return false;\n    },\n    [actions.setUserFailure]() {\n      return false;\n    },\n  },\n  false,\n);\n\nexport default combineReducers({\n  isLogin,\n  username,\n  isRequest,\n});\n","export const getLogin = (state) => state.isLogin;\nexport const getUsername = (state) => state.username;\nexport const getIsRequest = (state) => state.isRequest;\nexport const getIsINternetError = (state) => state.isInternetError;\n","import React from 'react';\nimport './Header.css';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Button } from 'antd';\nimport { Route, NavLink, Switch } from 'react-router-dom';\nimport { getLogin } from '../../redux/selectors';\nimport * as actions from '../../redux/actions';\nimport { clearLocalstoge } from '../../utils';\n\nconst mapStateToProps = (state) => {\n  const props = {\n    isLogin: getLogin(state),\n  };\n  return props;\n};\n\nconst actionCreators = {\n  setLoginExit: actions.setLoginExit,\n};\n\nconst Header = ({ setLoginExit }) => {\n  const handleClickExit = () => {\n    setLoginExit();\n    clearLocalstoge();\n  };\n\n  const Login = () => (\n    <Button className=\"header__btn\" onClick={handleClickExit}>\n      <NavLink to=\"/blogging-platform/login\">Войти</NavLink>\n    </Button>\n  );\n  const Signup = () => (\n    <Button className=\"header__btn\" onClick={handleClickExit}>\n      <NavLink to=\"/blogging-platform/signup\">Регистрация</NavLink>\n    </Button>\n  );\n\n  const Exit = () => (\n    <Button className=\"header__btn\" onClick={handleClickExit}>\n      <NavLink to=\"/blogging-platform/signup\">Выход</NavLink>\n    </Button>\n  );\n\n  return (\n    <div className=\"header\">\n      <Switch>\n        <Route path=\"/blogging-platform/signup\" component={Login} />\n        <Route path=\"/blogging-platform/login\" component={Signup} />\n        <Route path=\"/blogging-platform/home\" component={Exit} />\n      </Switch>\n    </div>\n  );\n};\n\nHeader.propTypes = {\n  setLoginExit: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, actionCreators)(Header);\n","import Header from './Header';\n\nexport default Header;\n","import * as Yup from 'yup';\n\nconst validationSchema = Yup.object().shape({\n  username: Yup.string()\n    .max(50, 'Что-то слишком длинное имя')\n    .min(2, 'Слишком короткое имя')\n    .required('Обязательное поле'),\n  password: Yup.string()\n    .min(8, 'Не менее 8 символов')\n    .max(40, 'Ну может покороче пароль придумаете?')\n    .required('Обязательное поле')\n    .matches(\n      /(?=.*[0-9])(?=.*[A-Z])[a-z0-9A-Z]/,\n      'буквы латинского алфавита и цифры, от 8 до 40 символов, как минимум одна цифра и одна заглавная буква',\n    ),\n  email: Yup.string()\n    .email('Вводи правильно, адрес не коректен')\n    .required('Обязательное поле'),\n});\n\nexport default validationSchema;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Formik, Form, Field } from 'formik';\nimport TextField from '@material-ui/core/TextField';\nimport { Button } from 'antd';\nimport { NavLink } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { getLogin, getIsRequest } from '../../redux/selectors';\nimport validationSchema from './vadalition';\nimport * as actions from '../../redux/actions';\n\nconst useStyles = makeStyles((theme) => ({\n  wrapper__registration: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: theme.spacing(2),\n  },\n\n  title: {\n    textTransform: 'uppercase',\n    textAlign: 'center',\n    margin: 0,\n    marginTop: theme.spacing(1),\n    '@media(maxWidth: 1200px)': {\n      fontSize: 18,\n    },\n  },\n\n  registration: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    alignContent: 'center',\n    padding: theme.spacing(2),\n    width: 350,\n  },\n\n  registration__data: {\n    marginBottom: theme.spacing(2),\n  },\n\n  error__internet: {\n    textAlign: 'center',\n    color: 'red',\n  },\n}));\n\nconst actionCreators = {\n  registration: actions.registration,\n};\n\nconst FormRegistration = ({ registration, isRequest }) => {\n  const classes = useStyles();\n  const initialValues = {\n    username: '',\n    email: '',\n    password: '',\n  };\n\n  return (\n    <div className={classes.wrapper__registration}>\n      <h1 className={classes.title}>регистрация</h1>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={(values, { setFieldError }) => {\n          registration(values, setFieldError);\n        }}\n      >\n        {({\n          touched,\n          errors,\n          handleSubmit,\n          handleBlur,\n          handleChange,\n          values,\n          dirty,\n          isValid,\n        }) => (\n          <Form className={classes.registration} onSubmit={handleSubmit}>\n            <Field\n              size=\"small\"\n              name=\"username\"\n              className={classes.registration__data}\n              as=\"input\"\n              component={TextField}\n              label=\"Имя\"\n              variant=\"outlined\"\n              onChange={handleChange('username')}\n              error={touched.username && Boolean(errors.username)}\n              helperText={touched.username && errors.username}\n              onBlur={handleBlur('username')}\n              required\n              value={values.username}\n              disabled={isRequest}\n            />\n            <Field\n              size=\"small\"\n              name=\"email\"\n              className={classes.registration__data}\n              as=\"input\"\n              component={TextField}\n              label=\"Электронная почта\"\n              variant=\"outlined\"\n              onChange={handleChange('email')}\n              error={touched.email && Boolean(errors.email)}\n              helperText={touched.email && errors.email}\n              onBlur={handleBlur('email')}\n              required\n              value={values.email}\n              disabled={isRequest}\n            />\n            <Field\n              size=\"small\"\n              name=\"password\"\n              className={classes.registration__data}\n              component={TextField}\n              label=\"Пароль\"\n              variant=\"outlined\"\n              onChange={handleChange('password')}\n              type=\"password\"\n              error={touched.password && Boolean(errors.password)}\n              helperText={touched.password && errors.password}\n              onBlur={handleBlur('password')}\n              autoComplete=\"current-password\"\n              fullWidth\n              required\n              value={values.password}\n              disabled={isRequest}\n            />\n            <Button\n              htmlType=\"submit\"\n              type=\"primary\"\n              disabled={!isValid || !dirty || isRequest}\n            >\n              Зарегистрироваться\n            </Button>\n            {errors.errorName && (\n              <span className={classes.error__internet}>\n                {errors.errorName}\n              </span>\n            )}\n          </Form>\n        )}\n      </Formik>\n      <NavLink to=\"/blogging-platform/login\">Войти</NavLink>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const props = {\n    isLogin: getLogin(state),\n    isRequest: getIsRequest(state),\n  };\n  return props;\n};\n\nFormRegistration.propTypes = {\n  registration: PropTypes.func.isRequired,\n  isRequest: PropTypes.bool.isRequired,\n};\n\nexport default connect(mapStateToProps, actionCreators)(FormRegistration);\n","import FormRegistration from './Form-registration';\n\nexport default FormRegistration;\n","import * as Yup from 'yup';\n\nconst validationSchema = Yup.object().shape({\n  password: Yup.string().required('Обязательное поле'),\n  email: Yup.string()\n    .email('Вводи правильно, адрес не коректен')\n    .required('Обязательное поле'),\n});\n\nexport default validationSchema;\n","/* eslint-disable react/no-unused-prop-types */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Formik, Form, Field } from 'formik';\nimport TextField from '@material-ui/core/TextField';\nimport { Button } from 'antd';\nimport { NavLink } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { getLogin, getIsRequest } from '../../redux/selectors';\nimport validationSchema from './vadalition';\nimport * as actions from '../../redux/actions';\n\nconst useStyles = makeStyles((theme) => ({\n  wrapper__registration: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: theme.spacing(2),\n  },\n\n  title: {\n    textTransform: 'uppercase',\n    textAlign: 'center',\n    margin: 0,\n    marginTop: theme.spacing(1),\n    '@media(maxWidth: 1200px)': {\n      fontSize: 18,\n    },\n  },\n\n  registration: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    alignContent: 'center',\n    padding: theme.spacing(2),\n    width: 350,\n  },\n\n  registration__data: {\n    marginBottom: theme.spacing(2),\n  },\n\n  error__internet: {\n    textAlign: 'center',\n    color: 'red',\n  },\n}));\n\nconst actionCreators = {\n  authorization: actions.authorization,\n};\n\nconst FormAutorization = ({ authorization, isRequest }) => {\n  const classes = useStyles();\n\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n\n  return (\n    <div className={classes.wrapper__registration}>\n      <h1 className={classes.title}>Авторизация</h1>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={(values, { setFieldError }) => {\n          authorization(values, setFieldError);\n        }}\n      >\n        {({\n          touched,\n          errors,\n          handleSubmit,\n          handleBlur,\n          handleChange,\n          values,\n          isValid,\n          dirty,\n        }) => (\n          <Form className={classes.registration} onSubmit={handleSubmit}>\n            <Field\n              size=\"small\"\n              name=\"email\"\n              className={classes.registration__data}\n              as=\"input\"\n              component={TextField}\n              label=\"Электронная почта\"\n              variant=\"outlined\"\n              onChange={handleChange('email')}\n              error={touched.email && Boolean(errors.email)}\n              helperText={touched.email && errors.email}\n              onBlur={handleBlur('email')}\n              required\n              value={values.email}\n              disabled={isRequest}\n            />\n            <Field\n              size=\"small\"\n              name=\"password\"\n              className={classes.registration__data}\n              component={TextField}\n              label=\"Пароль\"\n              variant=\"outlined\"\n              onChange={handleChange('password')}\n              type=\"password\"\n              error={touched.password && Boolean(errors.password)}\n              helperText={touched.password && errors.password}\n              onBlur={handleBlur('password')}\n              autoComplete=\"current-password\"\n              fullWidth\n              required\n              value={values.password}\n              disabled={isRequest}\n            />\n            <Button\n              htmlType=\"submit\"\n              type=\"primary\"\n              disabled={!isValid || !dirty || isRequest}\n            >\n              Вход\n            </Button>\n            {errors.errorName && (\n              <span className={classes.error__internet}>\n                {errors.errorName}\n              </span>\n            )}\n          </Form>\n        )}\n      </Formik>\n      <NavLink to=\"/blogging-platform/signup\">Зарегистрироваться</NavLink>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const props = {\n    isLogin: getLogin(state),\n    isRequest: getIsRequest(state),\n  };\n  return props;\n};\n\nFormAutorization.propTypes = {\n  isLogin: PropTypes.bool.isRequired,\n  isRequest: PropTypes.bool.isRequired,\n  authorization: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, actionCreators)(FormAutorization);\n","import FormAutorization from './Form-autorisation';\n\nexport default FormAutorization;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Button } from 'antd';\nimport { NavLink } from 'react-router-dom';\nimport { getUsername } from '../../redux/selectors';\nimport * as actions from '../../redux/actions';\nimport './Home.css';\nimport { clearLocalstoge } from '../../utils';\n\nconst mapStateToProps = (state) => {\n  const props = {\n    username: getUsername(state),\n  };\n  return props;\n};\n\nconst actionCreators = {\n  setLoginExit: actions.setLoginExit,\n};\n\nconst Houme = ({ username, setLoginExit }) => {\n  const handleClick = () => {\n    setLoginExit();\n    clearLocalstoge();\n  };\n\n  return (\n    <div className=\"wrapper__houme\">\n      <h1 className=\"title\">Личный кабинет</h1>\n      <span className=\"name\">{username}</span>\n      <Button className=\"houme__btn\" onClick={handleClick}>\n        <NavLink to=\"/blogging-platform/login\">Выход</NavLink>\n      </Button>\n    </div>\n  );\n};\n\nHoume.propTypes = {\n  username: PropTypes.string.isRequired,\n  setLoginExit: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, actionCreators)(Houme);\n","import Houme from './Home';\n\nexport default Houme;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Route, useHistory } from 'react-router-dom';\nimport Header from '../Header';\nimport { getLogin } from '../../redux/selectors';\nimport FormRegistration from '../form-registration';\nimport FormAutorization from '../form-autorisation';\nimport Home from '../Home';\nimport * as actions from '../../redux/actions';\n\nconst App = ({ isLogin, getUser, setLoginSuccess }) => {\n  const history = useHistory();\n\n  const fetchPath = () => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      getUser(history);\n      setLoginSuccess();\n    } else {\n      history.push('/blogging-platform/signup');\n    }\n  };\n\n  useEffect(() => {\n    fetchPath();\n  }, [isLogin]);\n\n  return (\n    <>\n      <div className=\"container\">\n        <Route path=\"/blogging-platform\" component={Header} />\n        <div className=\"sitebar\">\n          <Route path=\"/blogging-platform/home\" component={Home} />\n          <Route path=\"/blogging-platform/login\" component={FormAutorization} />\n          <Route\n            path=\"/blogging-platform/signup\"\n            component={FormRegistration}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const props = {\n    isLogin: getLogin(state),\n  };\n  return props;\n};\n\nconst actionCreators = {\n  getUser: actions.getUser,\n  setLoginSuccess: actions.setLoginSuccess,\n};\n\nApp.propTypes = {\n  isLogin: PropTypes.bool.isRequired,\n  getUser: PropTypes.func.isRequired,\n  setLoginSuccess: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, actionCreators)(App);\n","import App from './App';\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport redusers from './redux/redusers';\nimport '@csstools/normalize.css';\nimport 'antd/dist/antd.css';\nimport App from './components/App';\n\nconst store = createStore(redusers, compose(applyMiddleware(thunk)));\nconst Main = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <Route component={App} />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Main />, document.getElementById('root'));\n"],"sourceRoot":""}